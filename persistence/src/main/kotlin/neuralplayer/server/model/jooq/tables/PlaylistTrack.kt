/*
 * This file is generated by jOOQ.
 */
package neuralplayer.server.model.jooq.tables

import neuralplayer.server.model.jooq.Indexes
import neuralplayer.server.model.jooq.Keys
import neuralplayer.server.model.jooq.NeuralPlayer
import neuralplayer.server.model.jooq.tables.records.PlaylistTrackRecord
import org.jooq.*
import org.jooq.impl.DSL
import org.jooq.impl.TableImpl

import javax.annotation.Generated
import java.util.Arrays

/**
 * This class is generated by jOOQ.
 */
@Generated(value = ["http://www.jooq.org", "jOOQ version:3.11.2"], comments = "This class is generated by jOOQ")
class PlaylistTrack : TableImpl<PlaylistTrackRecord> {

	/**
	 * The column `neural_player.playlist_track.playlist_id`.
	 */
	val PLAYLIST_ID: TableField<PlaylistTrackRecord, Long> = createField("playlist_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "")

	/**
	 * The column `neural_player.playlist_track.track_id`.
	 */
	val TRACK_ID: TableField<PlaylistTrackRecord, Long> = createField("track_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "")

	/**
	 * The class holding records for this type
	 */
	override fun getRecordType(): Class<PlaylistTrackRecord> {
		return PlaylistTrackRecord::class.java
	}

	/**
	 * Create an aliased `neural_player.playlist_track` table reference
	 */
	constructor(alias: String = "playlist_track")
			: this(DSL.name(alias), PLAYLIST_TRACK)

	/**
	 * Create an aliased `neural_player.playlist_track` table reference
	 */
	constructor(alias: Name)
			: this(alias, PLAYLIST_TRACK)

	private constructor(alias: Name, aliased: Table<PlaylistTrackRecord>?, parameters: Array<Field<*>>? = null)
			: super(alias, null, aliased, parameters, DSL.comment(""))

	constructor(child: Table<*>, key: ForeignKey<*, PlaylistTrackRecord>)
			: super(child, key, PLAYLIST_TRACK)

	/**
	 * {@inheritDoc}
	 */
	override fun getSchema(): Schema {
		return NeuralPlayer.NEURAL_PLAYER
	}

	/**
	 * {@inheritDoc}
	 */
	override fun getIndexes(): List<Index> {
		return Arrays.asList(Indexes.PLAYLIST_TRACK_PLAYLIST_TRACK_TRACK_ID_FK,
				Indexes.PLAYLIST_TRACK_PRIMARY)
	}

	/**
	 * {@inheritDoc}
	 */
	override fun getPrimaryKey(): UniqueKey<PlaylistTrackRecord> {
		return Keys.KEY_PLAYLIST_TRACK_PRIMARY
	}

	/**
	 * {@inheritDoc}
	 */
	override fun getKeys(): List<UniqueKey<PlaylistTrackRecord>> {
		return Arrays.asList(Keys.KEY_PLAYLIST_TRACK_PRIMARY)
	}

	/**
	 * {@inheritDoc}
	 */
	override fun getReferences(): List<ForeignKey<PlaylistTrackRecord, *>> {
		return Arrays.asList<ForeignKey<PlaylistTrackRecord, *>>(Keys.PLAYLIST_TRACK_PLAYLIST_ID_FK,
				Keys.PLAYLIST_TRACK_TRACK_ID_FK)
	}

	fun playlist(): Playlist {
		return Playlist(this, Keys.PLAYLIST_TRACK_PLAYLIST_ID_FK)
	}

	fun track(): Track {
		return Track(this, Keys.PLAYLIST_TRACK_TRACK_ID_FK)
	}

	/**
	 * {@inheritDoc}
	 */
	override fun `as`(alias: String): PlaylistTrack {
		return PlaylistTrack(DSL.name(alias), this)
	}

	/**
	 * {@inheritDoc}
	 */
	override fun `as`(alias: Name): PlaylistTrack {
		return PlaylistTrack(alias, this)
	}

	/**
	 * Rename this table
	 */
	override fun rename(name: String): PlaylistTrack {
		return PlaylistTrack(DSL.name(name), null)
	}

	/**
	 * Rename this table
	 */
	override fun rename(name: Name): PlaylistTrack {
		return PlaylistTrack(name, null)
	}

	companion object {

		private const val serialVersionUID: Long = 453929398

		/**
		 * The reference instance of `neural_player.playlist_track`
		 */
		val PLAYLIST_TRACK = PlaylistTrack()
	}
}
