/*
 * This file is generated by jOOQ.
 */
package neuralplayer.server.model.jooq.tables.daos

import neuralplayer.server.model.jooq.tables.pojos.Track
import neuralplayer.server.model.jooq.tables.records.TrackRecord
import org.jooq.Configuration
import org.jooq.impl.DAOImpl

import javax.annotation.Generated
import java.sql.Timestamp

/**
 * This class is generated by jOOQ.
 */
@Generated(value = ["http://www.jooq.org", "jOOQ version:3.11.2"], comments = "This class is generated by jOOQ")
class TrackDao : DAOImpl<TrackRecord, Track, Long> {

	/**
	 * Create a new TrackDao without any configuration
	 */
	constructor() : super(neuralplayer.server.model.jooq.tables.Track.TRACK, Track::class.java)

	/**
	 * Create a new TrackDao with an attached configuration
	 */
	constructor(configuration: Configuration) : super(neuralplayer.server.model.jooq.tables.Track.TRACK, Track::class.java, configuration)

	/**
	 * {@inheritDoc}
	 */
	override fun getId(`object`: Track): Long? {
		return `object`.id
	}

	/**
	 * Fetch records that have `id IN (values)`
	 */
	fun fetchById(vararg values: Long): List<Track> {
		return fetch(neuralplayer.server.model.jooq.tables.Track.TRACK.ID, *values.toTypedArray())
	}

	/**
	 * Fetch a unique record that has `id = value`
	 */
	fun fetchOneById(value: Long): Track {
		return fetchOne(neuralplayer.server.model.jooq.tables.Track.TRACK.ID, value)
	}

	/**
	 * Fetch records that have `title IN (values)`
	 */
	fun fetchByTitle(vararg values: String): List<Track> {
		return fetch(neuralplayer.server.model.jooq.tables.Track.TRACK.TITLE, *values)
	}

	/**
	 * Fetch records that have `artist IN (values)`
	 */
	fun fetchByArtist(vararg values: String?): List<Track> {
		return fetch<String>(neuralplayer.server.model.jooq.tables.Track.TRACK.ARTIST, *values)
	}

	/**
	 * Fetch records that have `album IN (values)`
	 */
	fun fetchByAlbum(vararg values: String?): List<Track> {
		return fetch<String>(neuralplayer.server.model.jooq.tables.Track.TRACK.ALBUM, *values)
	}

	/**
	 * Fetch records that have `file IN (values)`
	 */
	fun fetchByFile(vararg values: ByteArray): List<Track> {
		return fetch(neuralplayer.server.model.jooq.tables.Track.TRACK.FILE, *values)
	}

	/**
	 * Fetch records that have `file_extension IN (values)`
	 */
	fun fetchByFileExtension(vararg values: String): List<Track> {
		return fetch(neuralplayer.server.model.jooq.tables.Track.TRACK.FILE_EXTENSION, *values)
	}

	/**
	 * Fetch records that have `created_at IN (values)`
	 */
	fun fetchByCreatedAt(vararg values: Timestamp): List<Track> {
		return fetch(neuralplayer.server.model.jooq.tables.Track.TRACK.CREATED_AT, *values)
	}
}
