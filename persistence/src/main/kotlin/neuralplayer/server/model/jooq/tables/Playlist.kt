/*
 * This file is generated by jOOQ.
 */
package neuralplayer.server.model.jooq.tables

import neuralplayer.server.model.jooq.Indexes
import neuralplayer.server.model.jooq.Keys
import neuralplayer.server.model.jooq.NeuralPlayer
import neuralplayer.server.model.jooq.tables.records.PlaylistRecord
import org.jooq.*
import org.jooq.impl.DSL
import org.jooq.impl.TableImpl

import javax.annotation.Generated
import java.util.Arrays

/**
 * This class is generated by jOOQ.
 */
@Generated(value = ["http://www.jooq.org", "jOOQ version:3.11.2"], comments = "This class is generated by jOOQ")
class Playlist : TableImpl<PlaylistRecord> {

	/**
	 * The column `neural_player.playlist.id`.
	 */
	val ID: TableField<PlaylistRecord, Long> = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "")

	/**
	 * The column `neural_player.playlist.name`.
	 */
	val NAME: TableField<PlaylistRecord, String> = createField("name", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "")

	/**
	 * The column `neural_player.playlist.creator_id`.
	 */
	val CREATOR_ID: TableField<PlaylistRecord, Long> = createField("creator_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "")

	/**
	 * The class holding records for this type
	 */
	override fun getRecordType(): Class<PlaylistRecord> {
		return PlaylistRecord::class.java
	}

	/**
	 * Create an aliased `neural_player.playlist` table reference
	 */
	constructor(alias: String = "playlist")
			: this(DSL.name(alias), PLAYLIST)

	/**
	 * Create an aliased `neural_player.playlist` table reference
	 */
	constructor(alias: Name)
			: this(alias, PLAYLIST)

	private constructor(alias: Name, aliased: Table<PlaylistRecord>?, parameters: Array<Field<*>>? = null)
			: super(alias, null, aliased, parameters, DSL.comment(""))

	constructor(child: Table<*>, key: ForeignKey<*, PlaylistRecord>)
			: super(child, key, PLAYLIST)

	/**
	 * {@inheritDoc}
	 */
	override fun getSchema(): Schema {
		return NeuralPlayer.NEURAL_PLAYER
	}

	/**
	 * {@inheritDoc}
	 */
	override fun getIndexes(): List<Index> {
		return Arrays.asList(Indexes.PLAYLIST_PLAYLIST_CREATOR_ID_FK, Indexes.PLAYLIST_PRIMARY)
	}

	/**
	 * {@inheritDoc}
	 */
	override fun getIdentity(): Identity<PlaylistRecord, Long> {
		return Keys.IDENTITY_PLAYLIST
	}

	/**
	 * {@inheritDoc}
	 */
	override fun getPrimaryKey(): UniqueKey<PlaylistRecord> {
		return Keys.KEY_PLAYLIST_PRIMARY
	}

	/**
	 * {@inheritDoc}
	 */
	override fun getKeys(): List<UniqueKey<PlaylistRecord>> {
		return Arrays.asList(Keys.KEY_PLAYLIST_PRIMARY)
	}

	/**
	 * {@inheritDoc}
	 */
	override fun getReferences(): List<ForeignKey<PlaylistRecord, *>> {
		return Arrays.asList<ForeignKey<PlaylistRecord, *>>(Keys.PLAYLIST_CREATOR_ID_FK)
	}

	fun user(): User {
		return User(this, Keys.PLAYLIST_CREATOR_ID_FK)
	}

	/**
	 * {@inheritDoc}
	 */
	override fun `as`(alias: String): Playlist {
		return Playlist(DSL.name(alias), this)
	}

	/**
	 * {@inheritDoc}
	 */
	override fun `as`(alias: Name): Playlist {
		return Playlist(alias, this)
	}

	/**
	 * Rename this table
	 */
	override fun rename(name: String): Playlist {
		return Playlist(DSL.name(name), null)
	}

	/**
	 * Rename this table
	 */
	override fun rename(name: Name): Playlist {
		return Playlist(name, null)
	}

	companion object {

		private const val serialVersionUID: Long = 1721741892

		/**
		 * The reference instance of `neural_player.playlist`
		 */
		val PLAYLIST = Playlist()
	}
}
