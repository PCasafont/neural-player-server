/*
 * This file is generated by jOOQ.
 */
package neuralplayer.server.model.jooq.tables.records

import neuralplayer.server.model.jooq.tables.Track
import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.impl.UpdatableRecordImpl

import javax.annotation.Generated
import java.sql.Timestamp

/**
 * This class is generated by jOOQ.
 */
@Generated(value = ["http://www.jooq.org", "jOOQ version:3.11.2"], comments = "This class is generated by jOOQ")
@SuppressWarnings( "unchecked")
class TrackRecord : UpdatableRecordImpl<TrackRecord>, Record7<Long, String, String, String, ByteArray, String, Timestamp> {

	/**
	 * Getter for `neural_player.track.id`.
	 */
	/**
	 * Setter for `neural_player.track.id`.
	 */
	var id: Long
		get() = get(0) as Long
		set(value) = set(0, value)

	/**
	 * Getter for `neural_player.track.title`.
	 */
	/**
	 * Setter for `neural_player.track.title`.
	 */
	var title: String
		get() = get(1) as String
		set(value) = set(1, value)

	/**
	 * Getter for `neural_player.track.artist`.
	 */
	/**
	 * Setter for `neural_player.track.artist`.
	 */
	var artist: String?
		get() = get(2) as String?
		set(value) = set(2, value)

	/**
	 * Getter for `neural_player.track.album`.
	 */
	/**
	 * Setter for `neural_player.track.album`.
	 */
	var album: String?
		get() = get(3) as String?
		set(value) = set(3, value)

	/**
	 * Getter for `neural_player.track.file`.
	 */
	val file: ByteArray
		get() = get(4) as ByteArray

	/**
	 * Getter for `neural_player.track.file_extension`.
	 */
	/**
	 * Setter for `neural_player.track.file_extension`.
	 */
	var fileExtension: String
		get() = get(5) as String
		set(value) = set(5, value)

	/**
	 * Getter for `neural_player.track.created_at`.
	 */
	/**
	 * Setter for `neural_player.track.created_at`.
	 */
	var createdAt: Timestamp
		get() = get(6) as Timestamp
		set(value) = set(6, value)

	/**
	 * Setter for `neural_player.track.file`.
	 */
	fun setFile(vararg value: Byte) {
		set(4, value)
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	override fun key(): Record1<Long> {
		return super.key() as Record1<Long>
	}

	// -------------------------------------------------------------------------
	// Record7 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	override fun fieldsRow(): Row7<Long, String, String?, String?, ByteArray, String, Timestamp> {
		return super.fieldsRow() as Row7<Long, String, String?, String?, ByteArray, String, Timestamp>
	}

	/**
	 * {@inheritDoc}
	 */
	override fun valuesRow(): Row7<Long, String, String?, String?, ByteArray, String, Timestamp> {
		return super.valuesRow() as Row7<Long, String, String?, String?, ByteArray, String, Timestamp>
	}

	/**
	 * {@inheritDoc}
	 */
	override fun field1(): Field<Long> {
		return Track.TRACK.ID
	}

	/**
	 * {@inheritDoc}
	 */
	override fun field2(): Field<String> {
		return Track.TRACK.TITLE
	}

	/**
	 * {@inheritDoc}
	 */
	override fun field3(): Field<String?> {
		return Track.TRACK.ARTIST
	}

	/**
	 * {@inheritDoc}
	 */
	override fun field4(): Field<String?> {
		return Track.TRACK.ALBUM
	}

	/**
	 * {@inheritDoc}
	 */
	override fun field5(): Field<ByteArray> {
		return Track.TRACK.FILE
	}

	/**
	 * {@inheritDoc}
	 */
	override fun field6(): Field<String> {
		return Track.TRACK.FILE_EXTENSION
	}

	/**
	 * {@inheritDoc}
	 */
	override fun field7(): Field<Timestamp> {
		return Track.TRACK.CREATED_AT
	}

	/**
	 * {@inheritDoc}
	 */
	override fun component1(): Long {
		return id
	}

	/**
	 * {@inheritDoc}
	 */
	override fun component2(): String {
		return title
	}

	/**
	 * {@inheritDoc}
	 */
	override fun component3(): String? {
		return artist
	}

	/**
	 * {@inheritDoc}
	 */
	override fun component4(): String? {
		return album
	}

	/**
	 * {@inheritDoc}
	 */
	override fun component5(): ByteArray {
		return file
	}

	/**
	 * {@inheritDoc}
	 */
	override fun component6(): String {
		return fileExtension
	}

	/**
	 * {@inheritDoc}
	 */
	override fun component7(): Timestamp {
		return createdAt
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value1(): Long {
		return id
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value2(): String {
		return title
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value3(): String? {
		return artist
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value4(): String? {
		return album
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value5(): ByteArray {
		return file
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value6(): String {
		return fileExtension
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value7(): Timestamp {
		return createdAt
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value1(value: Long): TrackRecord {
		id = value
		return this
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value2(value: String): TrackRecord {
		title = value
		return this
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value3(value: String?): TrackRecord {
		artist = value
		return this
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value4(value: String?): TrackRecord {
		album = value
		return this
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value5(vararg value: Byte): TrackRecord {
		setFile(*value)
		return this
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value6(value: String): TrackRecord {
		fileExtension = value
		return this
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value7(value: Timestamp): TrackRecord {
		createdAt = value
		return this
	}

	/**
	 * {@inheritDoc}
	 */
	override fun values(value1: Long, value2: String, value3: String?, value4: String?, value5: ByteArray, value6: String, value7: Timestamp): TrackRecord {
		value1(value1)
		value2(value2)
		value3(value3)
		value4(value4)
		value5(*value5)
		value6(value6)
		value7(value7)
		return this
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached TrackRecord
	 */
	constructor() : super(Track.TRACK)

	/**
	 * Create a detached, initialised TrackRecord
	 */
	constructor(id: Long?, title: String, artist: String?, album: String?, file: ByteArray, fileExtension: String, createdAt: Timestamp) : super(Track.TRACK) {

		set(0, id)
		set(1, title)
		set(2, artist)
		set(3, album)
		set(4, file)
		set(5, fileExtension)
		set(6, createdAt)
	}

	companion object {

		private val serialVersionUID: Long = -1749897790
	}
}
