/*
 * This file is generated by jOOQ.
 */
package neuralplayer.server.model.jooq.tables.daos

import neuralplayer.server.model.jooq.tables.pojos.Playlist
import neuralplayer.server.model.jooq.tables.records.PlaylistRecord
import org.jooq.Configuration
import org.jooq.impl.DAOImpl

import javax.annotation.Generated

/**
 * This class is generated by jOOQ.
 */
@Generated(value = ["http://www.jooq.org", "jOOQ version:3.11.2"], comments = "This class is generated by jOOQ")
class PlaylistDao : DAOImpl<PlaylistRecord, Playlist, Long> {

	/**
	 * Create a new PlaylistDao without any configuration
	 */
	constructor() : super(neuralplayer.server.model.jooq.tables.Playlist.PLAYLIST, Playlist::class.java)

	/**
	 * Create a new PlaylistDao with an attached configuration
	 */
	constructor(configuration: Configuration) : super(neuralplayer.server.model.jooq.tables.Playlist.PLAYLIST, Playlist::class.java, configuration)

	/**
	 * {@inheritDoc}
	 */
	override fun getId(`object`: Playlist): Long? {
		return `object`.id
	}

	/**
	 * Fetch records that have `id IN (values)`
	 */
	fun fetchById(vararg values: Long): List<Playlist> {
		return fetch(neuralplayer.server.model.jooq.tables.Playlist.PLAYLIST.ID, *values.toTypedArray())
	}

	/**
	 * Fetch a unique record that has `id = value`
	 */
	fun fetchOneById(value: Long): Playlist {
		return fetchOne(neuralplayer.server.model.jooq.tables.Playlist.PLAYLIST.ID, value)
	}

	/**
	 * Fetch records that have `name IN (values)`
	 */
	fun fetchByName(vararg values: String): List<Playlist> {
		return fetch(neuralplayer.server.model.jooq.tables.Playlist.PLAYLIST.NAME, *values)
	}

	/**
	 * Fetch records that have `creator_id IN (values)`
	 */
	fun fetchByCreatorId(vararg values: Long): List<Playlist> {
		return fetch(neuralplayer.server.model.jooq.tables.Playlist.PLAYLIST.CREATOR_ID, *values.toTypedArray())
	}
}
