/*
 * This file is generated by jOOQ.
 */
package neuralplayer.server.model.jooq.tables.records

import neuralplayer.server.model.jooq.tables.User
import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.impl.UpdatableRecordImpl

import javax.annotation.Generated
import java.sql.Timestamp

/**
 * This class is generated by jOOQ.
 */
@Generated(value = ["http://www.jooq.org", "jOOQ version:3.11.2"], comments = "This class is generated by jOOQ")
@SuppressWarnings( "unchecked")
class UserRecord : UpdatableRecordImpl<UserRecord>, Record7<Long, String, String, String, String, String, Timestamp> {

	/**
	 * Getter for `neural_player.user.id`.
	 */
	/**
	 * Setter for `neural_player.user.id`.
	 */
	var id: Long
		get() = get(0) as Long
		set(value) = set(0, value)

	/**
	 * Getter for `neural_player.user.username`.
	 */
	/**
	 * Setter for `neural_player.user.username`.
	 */
	var username: String
		get() = get(1) as String
		set(value) = set(1, value)

	/**
	 * Getter for `neural_player.user.email`.
	 */
	/**
	 * Setter for `neural_player.user.email`.
	 */
	var email: String
		get() = get(2) as String
		set(value) = set(2, value)

	/**
	 * Getter for `neural_player.user.password`.
	 */
	/**
	 * Setter for `neural_player.user.password`.
	 */
	var password: String
		get() = get(3) as String
		set(value) = set(3, value)

	/**
	 * Getter for `neural_player.user.display_name`.
	 */
	/**
	 * Setter for `neural_player.user.display_name`.
	 */
	var displayName: String
		get() = get(4) as String
		set(value) = set(4, value)

	/**
	 * Getter for `neural_player.user.roles`.
	 */
	/**
	 * Setter for `neural_player.user.roles`.
	 */
	var roles: String
		get() = get(5) as String
		set(value) = set(5, value)

	/**
	 * Getter for `neural_player.user.created_at`.
	 */
	/**
	 * Setter for `neural_player.user.created_at`.
	 */
	var createdAt: Timestamp
		get() = get(6) as Timestamp
		set(value) = set(6, value)

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	override fun key(): Record1<Long> {
		return super.key() as Record1<Long>
	}

	// -------------------------------------------------------------------------
	// Record7 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	override fun fieldsRow(): Row7<Long, String, String, String, String, String, Timestamp> {
		return super.fieldsRow() as Row7<Long, String, String, String, String, String, Timestamp>
	}

	/**
	 * {@inheritDoc}
	 */
	override fun valuesRow(): Row7<Long, String, String, String, String, String, Timestamp> {
		return super.valuesRow() as Row7<Long, String, String, String, String, String, Timestamp>
	}

	/**
	 * {@inheritDoc}
	 */
	override fun field1(): Field<Long> {
		return User.USER.ID
	}

	/**
	 * {@inheritDoc}
	 */
	override fun field2(): Field<String> {
		return User.USER.USERNAME
	}

	/**
	 * {@inheritDoc}
	 */
	override fun field3(): Field<String> {
		return User.USER.EMAIL
	}

	/**
	 * {@inheritDoc}
	 */
	override fun field4(): Field<String> {
		return User.USER.PASSWORD
	}

	/**
	 * {@inheritDoc}
	 */
	override fun field5(): Field<String> {
		return User.USER.DISPLAY_NAME
	}

	/**
	 * {@inheritDoc}
	 */
	override fun field6(): Field<String> {
		return User.USER.ROLES
	}

	/**
	 * {@inheritDoc}
	 */
	override fun field7(): Field<Timestamp> {
		return User.USER.CREATED_AT
	}

	/**
	 * {@inheritDoc}
	 */
	override fun component1(): Long? {
		return id
	}

	/**
	 * {@inheritDoc}
	 */
	override fun component2(): String {
		return username
	}

	/**
	 * {@inheritDoc}
	 */
	override fun component3(): String {
		return email
	}

	/**
	 * {@inheritDoc}
	 */
	override fun component4(): String {
		return password
	}

	/**
	 * {@inheritDoc}
	 */
	override fun component5(): String {
		return displayName
	}

	/**
	 * {@inheritDoc}
	 */
	override fun component6(): String {
		return roles
	}

	/**
	 * {@inheritDoc}
	 */
	override fun component7(): Timestamp {
		return createdAt
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value1(): Long? {
		return id
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value2(): String {
		return username
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value3(): String {
		return email
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value4(): String {
		return password
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value5(): String {
		return displayName
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value6(): String {
		return roles
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value7(): Timestamp {
		return createdAt
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value1(value: Long): UserRecord {
		id = value
		return this
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value2(value: String): UserRecord {
		username = value
		return this
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value3(value: String): UserRecord {
		email = value
		return this
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value4(value: String): UserRecord {
		password = value
		return this
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value5(value: String): UserRecord {
		displayName = value
		return this
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value6(value: String): UserRecord {
		roles = value
		return this
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value7(value: Timestamp): UserRecord {
		createdAt = value
		return this
	}

	/**
	 * {@inheritDoc}
	 */
	override fun values(value1: Long, value2: String, value3: String, value4: String, value5: String, value6: String, value7: Timestamp): UserRecord {
		value1(value1)
		value2(value2)
		value3(value3)
		value4(value4)
		value5(value5)
		value6(value6)
		value7(value7)
		return this
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached UserRecord
	 */
	constructor() : super(User.USER)

	/**
	 * Create a detached, initialised UserRecord
	 */
	constructor(id: Long, username: String, email: String, password: String, displayName: String, roles: String, createdAt: Timestamp) : super(User.USER) {

		set(0, id)
		set(1, username)
		set(2, email)
		set(3, password)
		set(4, displayName)
		set(5, roles)
		set(6, createdAt)
	}

	companion object {

		private val serialVersionUID: Long = -157333006
	}
}
