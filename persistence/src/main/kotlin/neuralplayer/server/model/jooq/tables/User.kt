/*
 * This file is generated by jOOQ.
 */
package neuralplayer.server.model.jooq.tables

import neuralplayer.server.model.jooq.Indexes
import neuralplayer.server.model.jooq.Keys
import neuralplayer.server.model.jooq.NeuralPlayer
import neuralplayer.server.model.jooq.tables.records.UserRecord
import org.jooq.*
import org.jooq.impl.DSL
import org.jooq.impl.TableImpl

import javax.annotation.Generated
import java.sql.Timestamp
import java.util.Arrays

/**
 * This class is generated by jOOQ.
 */
@Generated(value = ["http://www.jooq.org", "jOOQ version:3.11.2"], comments = "This class is generated by jOOQ")
class User : TableImpl<UserRecord> {

	/**
	 * The column `neural_player.user.id`.
	 */
	val ID: TableField<UserRecord, Long> = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "")

	/**
	 * The column `neural_player.user.username`.
	 */
	val USERNAME: TableField<UserRecord, String> = createField("username", org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "")

	/**
	 * The column `neural_player.user.email`.
	 */
	val EMAIL: TableField<UserRecord, String> = createField("email", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "")

	/**
	 * The column `neural_player.user.password`.
	 */
	val PASSWORD: TableField<UserRecord, String> = createField("password", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "")

	/**
	 * The column `neural_player.user.display_name`.
	 */
	val DISPLAY_NAME: TableField<UserRecord, String> = createField("display_name", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "")

	/**
	 * The column `neural_player.user.roles`.
	 */
	val ROLES: TableField<UserRecord, String> = createField("roles", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "")

	/**
	 * The column `neural_player.user.created_at`.
	 */
	val CREATED_AT: TableField<UserRecord, Timestamp> = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "")

	/**
	 * The class holding records for this type
	 */
	override fun getRecordType(): Class<UserRecord> {
		return UserRecord::class.java
	}

	/**
	 * Create an aliased `neural_player.user` table reference
	 */
	constructor(alias: String = "user")
			: this(DSL.name(alias), USER)

	/**
	 * Create an aliased `neural_player.user` table reference
	 */
	constructor(alias: Name)
			: this(alias, USER)

	private constructor(alias: Name, aliased: Table<UserRecord>?, parameters: Array<Field<*>>? = null)
			: super(alias, null, aliased, parameters, DSL.comment(""))

	constructor(child: Table<*>, key: ForeignKey<*, UserRecord>)
			: super(child, key, USER)

	/**
	 * {@inheritDoc}
	 */
	override fun getSchema(): Schema {
		return NeuralPlayer.NEURAL_PLAYER
	}

	/**
	 * {@inheritDoc}
	 */
	override fun getIndexes(): List<Index> {
		return Arrays.asList(Indexes.USER_PRIMARY, Indexes.USER_USER_EMAIL_UNIQUE,
				Indexes.USER_USER_NAME_UNIQUE)
	}

	/**
	 * {@inheritDoc}
	 */
	override fun getIdentity(): Identity<UserRecord, Long> {
		return Keys.IDENTITY_USER
	}

	/**
	 * {@inheritDoc}
	 */
	override fun getPrimaryKey(): UniqueKey<UserRecord> {
		return Keys.KEY_USER_PRIMARY
	}

	/**
	 * {@inheritDoc}
	 */
	override fun getKeys(): List<UniqueKey<UserRecord>> {
		return Arrays.asList(Keys.KEY_USER_PRIMARY,
				Keys.KEY_USER_USER_NAME_UNIQUE, Keys.KEY_USER_USER_EMAIL_UNIQUE)
	}

	/**
	 * {@inheritDoc}
	 */
	override fun `as`(alias: String): User {
		return User(DSL.name(alias), this)
	}

	/**
	 * {@inheritDoc}
	 */
	override fun `as`(alias: Name): User {
		return User(alias, this)
	}

	/**
	 * Rename this table
	 */
	override fun rename(name: String): User {
		return User(DSL.name(name), null)
	}

	/**
	 * Rename this table
	 */
	override fun rename(name: Name): User {
		return User(name, null)
	}

	companion object {

		private const val serialVersionUID: Long = -874302664

		/**
		 * The reference instance of `neural_player.user`
		 */
		val USER = User()
	}
}
