/*
 * This file is generated by jOOQ.
 */
package neuralplayer.server.model.jooq.tables

import neuralplayer.server.model.jooq.Indexes
import neuralplayer.server.model.jooq.Keys
import neuralplayer.server.model.jooq.NeuralPlayer
import neuralplayer.server.model.jooq.tables.records.TrackRecord
import org.jooq.*
import org.jooq.impl.DSL
import org.jooq.impl.TableImpl

import javax.annotation.Generated
import java.sql.Timestamp
import java.util.Arrays

/**
 * This class is generated by jOOQ.
 */
@Generated(value = ["http://www.jooq.org", "jOOQ version:3.11.2"], comments = "This class is generated by jOOQ")
class Track : TableImpl<TrackRecord> {

	/**
	 * The column `neural_player.track.id`.
	 */
	val ID: TableField<TrackRecord, Long> = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "")

	/**
	 * The column `neural_player.track.title`.
	 */
	val TITLE: TableField<TrackRecord, String> = createField("title", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "")

	/**
	 * The column `neural_player.track.artist`.
	 */
	val ARTIST: TableField<TrackRecord, String?> = createField("artist", org.jooq.impl.SQLDataType.VARCHAR(64).defaultValue(DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "")

	/**
	 * The column `neural_player.track.album`.
	 */
	val ALBUM: TableField<TrackRecord, String?> = createField("album", org.jooq.impl.SQLDataType.VARCHAR(64).defaultValue(DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "")

	/**
	 * The column `neural_player.track.file`.
	 */
	val FILE: TableField<TrackRecord, ByteArray> = createField("file", org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "")

	/**
	 * The column `neural_player.track.file_extension`.
	 */
	val FILE_EXTENSION: TableField<TrackRecord, String> = createField("file_extension", org.jooq.impl.SQLDataType.VARCHAR(8).nullable(false), this, "")

	/**
	 * The column `neural_player.track.created_at`.
	 */
	val CREATED_AT: TableField<TrackRecord, Timestamp> = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "")

	/**
	 * The class holding records for this type
	 */
	override fun getRecordType(): Class<TrackRecord> {
		return TrackRecord::class.java
	}

	/**
	 * Create an aliased `neural_player.track` table reference
	 */
	constructor(alias: String = "track")
			: this(DSL.name(alias), TRACK)

	/**
	 * Create an aliased `neural_player.track` table reference
	 */
	constructor(alias: Name)
			: this(alias, TRACK)

	private constructor(alias: Name, aliased: Table<TrackRecord>?, parameters: Array<Field<*>>? = null)
			: super(alias, null, aliased, parameters, DSL.comment(""))

	constructor(child: Table<*>, key: ForeignKey<*, TrackRecord>)
			: super(child, key, TRACK)

	/**
	 * {@inheritDoc}
	 */
	override fun getSchema(): Schema {
		return NeuralPlayer.NEURAL_PLAYER
	}

	/**
	 * {@inheritDoc}
	 */
	override fun getIndexes(): List<Index> {
		return Arrays.asList(Indexes.TRACK_PRIMARY)
	}

	/**
	 * {@inheritDoc}
	 */
	override fun getIdentity(): Identity<TrackRecord, Long> {
		return Keys.IDENTITY_TRACK
	}

	/**
	 * {@inheritDoc}
	 */
	override fun getPrimaryKey(): UniqueKey<TrackRecord> {
		return Keys.KEY_TRACK_PRIMARY
	}

	/**
	 * {@inheritDoc}
	 */
	override fun getKeys(): List<UniqueKey<TrackRecord>> {
		return Arrays.asList(Keys.KEY_TRACK_PRIMARY)
	}

	/**
	 * {@inheritDoc}
	 */
	override fun `as`(alias: String): Track {
		return Track(DSL.name(alias), this)
	}

	/**
	 * {@inheritDoc}
	 */
	override fun `as`(alias: Name): Track {
		return Track(alias, this)
	}

	/**
	 * Rename this table
	 */
	override fun rename(name: String): Track {
		return Track(DSL.name(name), null)
	}

	/**
	 * Rename this table
	 */
	override fun rename(name: Name): Track {
		return Track(name, null)
	}

	companion object {

		private const val serialVersionUID: Long = -1447471966

		/**
		 * The reference instance of `neural_player.track`
		 */
		val TRACK = Track()
	}
}
