/*
 * This file is generated by jOOQ.
 */
package neuralplayer.server.model.jooq.tables.records

import neuralplayer.server.model.jooq.tables.UserTrack
import org.jooq.Field
import org.jooq.Record2
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl

import javax.annotation.Generated

/**
 * This class is generated by jOOQ.
 */
@Generated(value = ["http://www.jooq.org", "jOOQ version:3.11.2"], comments = "This class is generated by jOOQ")
@SuppressWarnings( "unchecked")
class UserTrackRecord : UpdatableRecordImpl<UserTrackRecord>, Record3<Long, Long, Double> {

	/**
	 * Getter for `neural_player.user_track.user_id`.
	 */
	/**
	 * Setter for `neural_player.user_track.user_id`.
	 */
	var userId: Long
		get() = get(0) as Long
		set(value) = set(0, value)

	/**
	 * Getter for `neural_player.user_track.track_id`.
	 */
	/**
	 * Setter for `neural_player.user_track.track_id`.
	 */
	var trackId: Long
		get() = get(1) as Long
		set(value) = set(1, value)

	/**
	 * Getter for `neural_player.user_track.preference_score`.
	 */
	/**
	 * Setter for `neural_player.user_track.preference_score`.
	 */
	var preferenceScore: Double
		get() = get(2) as Double
		set(value) = set(2, value)

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	override fun key(): Record2<Long, Long> {
		return super.key() as Record2<Long, Long>
	}

	// -------------------------------------------------------------------------
	// Record3 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	override fun fieldsRow(): Row3<Long, Long, Double> {
		return super.fieldsRow() as Row3<Long, Long, Double>
	}

	/**
	 * {@inheritDoc}
	 */
	override fun valuesRow(): Row3<Long, Long, Double> {
		return super.valuesRow() as Row3<Long, Long, Double>
	}

	/**
	 * {@inheritDoc}
	 */
	override fun field1(): Field<Long> {
		return UserTrack.USER_TRACK.USER_ID
	}

	/**
	 * {@inheritDoc}
	 */
	override fun field2(): Field<Long> {
		return UserTrack.USER_TRACK.TRACK_ID
	}

	/**
	 * {@inheritDoc}
	 */
	override fun field3(): Field<Double> {
		return UserTrack.USER_TRACK.PREFERENCE_SCORE
	}

	/**
	 * {@inheritDoc}
	 */
	override fun component1(): Long {
		return userId
	}

	/**
	 * {@inheritDoc}
	 */
	override fun component2(): Long {
		return trackId
	}

	/**
	 * {@inheritDoc}
	 */
	override fun component3(): Double {
		return preferenceScore
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value1(): Long? {
		return userId
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value2(): Long? {
		return trackId
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value3(): Double? {
		return preferenceScore
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value1(value: Long): UserTrackRecord {
		userId = value
		return this
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value2(value: Long): UserTrackRecord {
		trackId = value
		return this
	}

	/**
	 * {@inheritDoc}
	 */
	override fun value3(value: Double): UserTrackRecord {
		preferenceScore = value
		return this
	}

	/**
	 * {@inheritDoc}
	 */
	override fun values(value1: Long, value2: Long, value3: Double): UserTrackRecord {
		value1(value1)
		value2(value2)
		value3(value3)
		return this
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached UserTrackRecord
	 */
	constructor() : super(UserTrack.USER_TRACK)

	/**
	 * Create a detached, initialised UserTrackRecord
	 */
	constructor(userId: Long, trackId: Long, preferenceScore: Double) : super(UserTrack.USER_TRACK) {

		set(0, userId)
		set(1, trackId)
		set(2, preferenceScore)
	}

	companion object {

		private const val serialVersionUID: Long = 1426688102
	}
}
