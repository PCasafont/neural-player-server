/*
 * This file is generated by jOOQ.
 */
package neuralplayer.server.model.jooq.tables.daos

import neuralplayer.server.model.jooq.tables.pojos.User
import neuralplayer.server.model.jooq.tables.records.UserRecord
import org.jooq.Configuration
import org.jooq.impl.DAOImpl

import javax.annotation.Generated
import java.sql.Timestamp

/**
 * This class is generated by jOOQ.
 */
@Generated(value = ["http://www.jooq.org", "jOOQ version:3.11.2"], comments = "This class is generated by jOOQ")
class UserDao : DAOImpl<UserRecord, User, Long> {

	/**
	 * Create a new UserDao without any configuration
	 */
	constructor() : super(neuralplayer.server.model.jooq.tables.User.USER, User::class.java)

	/**
	 * Create a new UserDao with an attached configuration
	 */
	constructor(configuration: Configuration) : super(neuralplayer.server.model.jooq.tables.User.USER, User::class.java, configuration)

	/**
	 * {@inheritDoc}
	 */
	override fun getId(`object`: User): Long? {
		return `object`.id
	}

	/**
	 * Fetch records that have `id IN (values)`
	 */
	fun fetchById(vararg values: Long): List<User> {
		return fetch(neuralplayer.server.model.jooq.tables.User.USER.ID, *values.toTypedArray())
	}

	/**
	 * Fetch a unique record that has `id = value`
	 */
	fun fetchOneById(value: Long): User {
		return fetchOne(neuralplayer.server.model.jooq.tables.User.USER.ID, value)
	}

	/**
	 * Fetch records that have `username IN (values)`
	 */
	fun fetchByUsername(vararg values: String): List<User> {
		return fetch(neuralplayer.server.model.jooq.tables.User.USER.USERNAME, *values)
	}

	/**
	 * Fetch a unique record that has `username = value`
	 */
	fun fetchOneByUsername(value: String): User {
		return fetchOne(neuralplayer.server.model.jooq.tables.User.USER.USERNAME, value)
	}

	/**
	 * Fetch records that have `email IN (values)`
	 */
	fun fetchByEmail(vararg values: String): List<User> {
		return fetch(neuralplayer.server.model.jooq.tables.User.USER.EMAIL, *values)
	}

	/**
	 * Fetch a unique record that has `email = value`
	 */
	fun fetchOneByEmail(value: String): User {
		return fetchOne(neuralplayer.server.model.jooq.tables.User.USER.EMAIL, value)
	}

	/**
	 * Fetch records that have `password IN (values)`
	 */
	fun fetchByPassword(vararg values: String): List<User> {
		return fetch(neuralplayer.server.model.jooq.tables.User.USER.PASSWORD, *values)
	}

	/**
	 * Fetch records that have `display_name IN (values)`
	 */
	fun fetchByDisplayName(vararg values: String): List<User> {
		return fetch(neuralplayer.server.model.jooq.tables.User.USER.DISPLAY_NAME, *values)
	}

	/**
	 * Fetch records that have `roles IN (values)`
	 */
	fun fetchByRoles(vararg values: String): List<User> {
		return fetch(neuralplayer.server.model.jooq.tables.User.USER.ROLES, *values)
	}

	/**
	 * Fetch records that have `created_at IN (values)`
	 */
	fun fetchByCreatedAt(vararg values: Timestamp): List<User> {
		return fetch(neuralplayer.server.model.jooq.tables.User.USER.CREATED_AT, *values)
	}
}
